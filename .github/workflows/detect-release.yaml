name: Get latest release version
on:
  schedule:
    # https://crontab.guru/every-5-minutes
    - cron: "*/5 * * * *"
  workflow_dispatch:

env:
  REPO: misskey-dev/misskey
  GHCR_IMAGE: ghcr.io/${{ github.repository }}

jobs:
  get-version:
    name: Get the latest version
    runs-on: self-hosted
    permissions:
      contents: write
    outputs:
      version: ${{ steps.version.version }}
      is-new-version: ${{ steps.git-check.outputs.modified }}
    steps:
      - uses: actions/checkout@v3
      - name: Fetch release version
        run: |
          curl -sL https://api.github.com/repos/${{ env.REPO }}/releases/latest | jq -r ".tag_name" > latest.txt
      - name: Store latest version
        id: version
        run: |-
          echo ::set-output name=version::$(cat latest.txt)
          cat latest.txt
      - name: Check if a newer version is available
        id: git-check
        run: echo ::set-output name=modified::$([ -z "`git status --porcelain`" ] && echo "false" || echo "true")
      - name: Commit latest version
        if: steps.git-check.outputs.modified == 'true'
        run: |
          git config --global user.name 'Jared Allard'
          git config --global user.email 'jaredallard@users.noreply.github.com'
          git add -A latest.txt
          git commit -m "$(cat latest.txt)" latest.txt
          git push

  build-push-docker:
    name: Build and Push Docker Image to GHCR
    runs-on: self-hosted
    permissions:
      contents: read
      packages: write
    needs: get-version
    if: needs.get-version.outputs.is-new-version == 'true'
    steps:
      - uses: actions/checkout@v3
        with:
          repository: misskey-dev/misskey
          ref: ${{ needs.get-version.outputs.version }}

      # Setup QEMU to support arm64 image building
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      # Use buildx for multi-arch docker builds and for gh actions
      # caching.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      ## Push the built image to GHCR
      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN  }}
      - name: Docker meta
        id: meta_ghcr
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.GHCR_IMAGE }}

      - name: Push to GHCR
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: "linux/amd64,linux/arm64"
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta_ghcr.outputs.tags }}
          labels: ${{ steps.meta_ghcr.outputs.labels }}
